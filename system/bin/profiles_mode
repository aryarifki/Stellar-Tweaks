#!/system/bin/sh

#
# Copyright (C) 2024-2025 Kanao -  Stellar Tweaks
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

hmp="/sys/kernel/hmp"
kernel="/proc/sys/kernel"
cpu_path="/sys/devices/system/cpu/cpu*/cpufreq"
config_file="/data/adb/.config/stellar"

stellar_apply_param() {
    [ ! -f "$2" ] && return 1
    chmod 666 "$2" >/dev/null 2>&1
    echo "$1" > "$2" 2>/dev/null
    chmod 444 "$2" >/dev/null 2>&1
}

stellar_write_param() {
    [ ! -f "$2" ] && return 1
    chmod 666 "$2" &>/dev/null
    echo "$1" > "$2" &>/dev/null
}

sync

set_dnd() {
    case $1 in
    N) cmd notification set_dnd off ;;
    Y) cmd notification set_dnd priority ;;
    esac
}

hmp_tweaks() {
    if [ ! -d "$hmp" ]; then return 1; fi

    case "$1" in
        game)
            stellar_apply_param 524 "$hmp/hmp_up_threshold"
            stellar_apply_param 214 "$hmp/hmp_down_threshold"
            stellar_apply_param 25 "$kernel/sched_small_task"
            ;;
        battery)
            stellar_apply_param 922 "$hmp/hmp_up_threshold"
            stellar_apply_param 410 "$hmp/hmp_down_threshold"
            stellar_apply_param 75 "$kernel/sched_small_task"
            ;;
        normal|*)
            stellar_apply_param 819 "$hmp/hmp_up_threshold"
            stellar_apply_param 614 "$hmp/hmp_down_threshold"
            stellar_apply_param 50 "$kernel/sched_small_task"
            ;;
    esac
}

stellar_get_apex_hz() {
    tr ' ' '\n' <"$1" | sort -nr | head -n 1
}

stellar_get_nadir_hz() {
    tr ' ' '\n' <"$1" | grep -v '^[[:space:]]*$' | sort -n | head -n 1
}

stellar_get_median_hz() {
    total_opp=$(wc -w <"$1")
    mid_opp=$(((total_opp + 1) / 2))
    tr ' ' '\n' <"$1" | grep -v '^[[:space:]]*$' | sort -nr | head -n "$mid_opp" | tail -n 1
}

stellar_mtk_nadir_gpu_idx() {
    awk -F'[][]' '{print $2}' "$1" | tail -n 1
}

stellar_mtk_median_gpu_idx() {
    total_opp=$(wc -l <"$1")
    mid_opp=$(((total_opp + 1) / 2))
    awk -F'[][]' '{print $2}' "$1" | head -n "$mid_opp" | tail -n 1
}

Esoci="$(cat $config_file/soc)"
lite_mode="$(cat $config_file/lite)"
dvfs_gpu_file="$config_file/dvfs_lower"

exynos_perf() {
    local gpu_path="/sys/kernel/gpu"
    local freq freq_source
    [ -f "$gpu_path/gpu_available_frequencies" ] && freq_source="$gpu_path/gpu_available_frequencies" || freq_source="$gpu_path/gpu_freq_table"
    
    if [ "$lite_mode" -eq 1 ]; then
        freq=$(stellar_get_median_hz "$freq_source")
    else
        freq=$(stellar_get_apex_hz "$freq_source")
    fi

    if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
        freq=$((freq * 80 / 100))
    fi

    stellar_apply_param "$freq" "$gpu_path/gpu_min_clock"
    stellar_apply_param "$freq" "$gpu_path/gpu_max_clock"
    for mali_fs in /sys/devices/platform/*.mali; do
        stellar_apply_param "0" "$mali_fs/tmu"
    done
}

unisoc_perf() {
    local gpu_path="/sys/kernel/gpu"
    local freq freq_source
    [ -f "$gpu_path/gpu_available_frequencies" ] && freq_source="$gpu_path/gpu_available_frequencies" || freq_source="$gpu_path/gpu_freq_table"
    
    if [ "$lite_mode" -eq 1 ]; then
        freq=$(stellar_get_median_hz "$freq_source")
    else
        freq=$(stellar_get_apex_hz "$freq_source")
    fi

    if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
        freq=$((freq * 80 / 100))
    fi

    stellar_apply_param "$freq" "$gpu_path/gpu_min_clock"
    stellar_apply_param "$freq" "$gpu_path/gpu_max_clock"
    for mali_fs in /sys/devices/platform/*.mali; do
        stellar_apply_param "0" "$mali_fs/tmu"
    done
}

snapdragon_perf() {
    gpu_path="/sys/class/kgsl/kgsl-3d0/devfreq"
    if [ -d "$gpu_path" ]; then
        if [ "$lite_mode" -eq 1 ]; then
            freq=$(stellar_get_median_hz "$gpu_path/available_frequencies")
        else
            freq=$(stellar_get_apex_hz "$gpu_path/available_frequencies")
        fi

        if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
            freq=$((freq * 80 / 100))
        fi

        stellar_apply_param "$freq" "$gpu_path/min_freq"
        stellar_apply_param "$freq" "$gpu_path/max_freq"
    fi
}

mediatek_perf() {
    if [ "$lite_mode" -eq 1 ] || { [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; }; then
        if [ -d /proc/gpufreqv2 ]; then
            mid_oppfreq=$(stellar_mtk_median_gpu_idx /proc/gpufreqv2/gpu_working_opp_table)
            stellar_apply_param "$mid_oppfreq" /proc/gpufreqv2/fix_target_opp_index
        else
            mid_freq=$(stellar_get_median_hz /proc/gpufreq/gpufreq_opp_dump)
            stellar_apply_param "$mid_freq" /proc/gpufreq/gpufreq_opp_freq
        fi
    else
        if [ -d /proc/gpufreqv2 ]; then
            stellar_apply_param 0 /proc/gpufreqv2/fix_target_opp_index
        else
            gpu_freq=$(stellar_get_apex_hz /proc/gpufreq/gpufreq_opp_dump)
            stellar_apply_param "$gpu_freq" /proc/gpufreq/gpufreq_opp_freq
        fi
    fi
}

exynos_normal() {
    local gpu_path="/sys/kernel/gpu"
    local min_freq max_freq freq_source
    [ -f "$gpu_path/gpu_available_frequencies" ] && freq_source="$gpu_path/gpu_available_frequencies" || freq_source="$gpu_path/gpu_freq_table"
    min_freq=$(stellar_get_nadir_hz "$freq_source")
    
    if [ "$lite_mode" -eq 1 ]; then
        max_freq=$(stellar_get_median_hz "$freq_source")
    else
        max_freq=$(stellar_get_apex_hz "$freq_source")
    fi

    if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
        max_freq=$((max_freq * 80 / 100))
    fi

    stellar_apply_param "$min_freq" "$gpu_path/gpu_min_clock"
    stellar_apply_param "$max_freq" "$gpu_path/gpu_max_clock"
    for mali_fs in /sys/devices/platform/*.mali; do
        stellar_apply_param "1" "$mali_fs/tmu"
    done
}

unisoc_normal() {
    local gpu_path="/sys/kernel/gpu"
    local min_freq max_freq freq_source
    [ -f "$gpu_path/gpu_available_frequencies" ] && freq_source="$gpu_path/gpu_available_frequencies" || freq_source="$gpu_path/gpu_freq_table"
    min_freq=$(stellar_get_nadir_hz "$freq_source")
    
    if [ "$lite_mode" -eq 1 ]; then
        max_freq=$(stellar_get_median_hz "$freq_source")
    else
        max_freq=$(stellar_get_apex_hz "$freq_source")
    fi

    if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
        max_freq=$((max_freq * 80 / 100))
    fi

    stellar_apply_param "$min_freq" "$gpu_path/gpu_min_clock"
    stellar_apply_param "$max_freq" "$gpu_path/gpu_max_clock"
    for mali_fs in /sys/devices/platform/*.mali; do
        stellar_apply_param "1" "$mali_fs/tmu"
    done
}

snapdragon_normal() {
    gpu_path="/sys/class/kgsl/kgsl-3d0/devfreq"
    if [ -d "$gpu_path" ]; then
        min_freq=$(stellar_get_nadir_hz "$gpu_path/available_frequencies")
        if [ "$lite_mode" -eq 1 ]; then
            max_freq=$(stellar_get_median_hz "$gpu_path/available_frequencies")
        else
            max_freq=$(stellar_get_apex_hz "$gpu_path/available_frequencies")
        fi

        if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
            max_freq=$((max_freq * 80 / 100))
        fi

        stellar_apply_param "$min_freq" "$gpu_path/min_freq"
        stellar_apply_param "$max_freq" "$gpu_path/max_freq"
    fi
}

mediatek_normal() {
    stellar_write_param "0" "/proc/gpufreq/gpufreq_opp_freq"
    stellar_write_param "-1" "/proc/gpufreqv2/fix_target_opp_index"
    
    if [ "$lite_mode" -eq 1 ] || { [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; }; then
        if [ -d /proc/gpufreqv2 ]; then
            mid_oppfreq=$(stellar_mtk_median_gpu_idx /proc/gpufreqv2/gpu_working_opp_table)
            stellar_apply_param "$mid_oppfreq" /sys/kernel/ged/hal/custom_boost_gpu_freq
        else
            mid_freq=$(stellar_get_median_hz /proc/gpufreq/gpufreq_opp_dump)
            stellar_apply_param "$mid_freq" /proc/gpufreq/gpufreq_opp_freq
        fi
    fi
}

exynos_battery() {
    local gpu_path="/sys/kernel/gpu"
    local min_freq max_freq freq_source
    [ -f "$gpu_path/gpu_available_frequencies" ] && freq_source="$gpu_path/gpu_available_frequencies" || freq_source="$gpu_path/gpu_freq_table"
    min_freq=$(stellar_get_nadir_hz "$freq_source")
    
    if [ "$lite_mode" -eq 1 ]; then
        max_freq=$(stellar_get_median_hz "$freq_source")
    else
        max_freq=$(stellar_get_apex_hz "$freq_source")
    fi

    if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
        max_freq=$((max_freq * 80 / 100))
    fi

    stellar_apply_param "$min_freq" "$gpu_path/gpu_min_clock"
    stellar_apply_param "$max_freq" "$gpu_path/gpu_max_clock"
    for mali_fs in /sys/devices/platform/*.mali; do
        stellar_apply_param "1" "$mali_fs/tmu"
    done
}

unisoc_battery() {
    local gpu_path="/sys/kernel/gpu"
    local min_freq max_freq freq_source
    [ -f "$gpu_path/gpu_available_frequencies" ] && freq_source="$gpu_path/gpu_available_frequencies" || freq_source="$gpu_path/gpu_freq_table"
    min_freq=$(stellar_get_nadir_hz "$freq_source")
    
    if [ "$lite_mode" -eq 1 ]; then
        max_freq=$(stellar_get_median_hz "$freq_source")
    else
        max_freq=$(stellar_get_apex_hz "$freq_source")
    fi

    if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
        max_freq=$((max_freq * 80 / 100))
    fi

    stellar_apply_param "$min_freq" "$gpu_path/gpu_min_clock"
    stellar_apply_param "$max_freq" "$gpu_path/gpu_max_clock"
    for mali_fs in /sys/devices/platform/*.mali; do
        stellar_apply_param "1" "$mali_fs/tmu"
    done
}

snapdragon_battery() {
    gpu_path="/sys/class/kgsl/kgsl-3d0/devfreq"
    if [ -d "$gpu_path" ]; then
        min_freq=$(stellar_get_nadir_hz "$gpu_path/available_frequencies")
        if [ "$lite_mode" -eq 1 ]; then
            max_freq=$(stellar_get_median_hz "$gpu_path/available_frequencies")
        else
            max_freq=$(stellar_get_apex_hz "$gpu_path/available_frequencies")
        fi

        if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
            max_freq=$((max_freq * 80 / 100))
        fi

        stellar_apply_param "$min_freq" "$gpu_path/min_freq"
        stellar_apply_param "$max_freq" "$gpu_path/max_freq"
    fi
}

tensor_perf() {
    echo "Applying Tensor G1 performance optimizations..."
    
    # Call the dedicated Tensor optimizer
    tensor_optimizer performance
    
    # Additional GPU optimizations specific to performance mode
    local gpu_path="/sys/kernel/gpu"
    local freq freq_source
    
    # Try multiple possible GPU frequency paths for Tensor G1
    for gpu_path in /sys/devices/platform/*.mali /sys/kernel/gpu; do
        [ ! -d "$gpu_path" ] && continue
        
        [ -f "$gpu_path/gpu_available_frequencies" ] && freq_source="$gpu_path/gpu_available_frequencies" || freq_source="$gpu_path/gpu_freq_table"
        
        if [ "$lite_mode" -eq 1 ]; then
            freq=$(stellar_get_median_hz "$freq_source")
        else
            freq=$(stellar_get_apex_hz "$freq_source")
        fi

        if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
            freq=$((freq * 80 / 100))
        fi

        stellar_apply_param "$freq" "$gpu_path/gpu_min_clock"
        stellar_apply_param "$freq" "$gpu_path/gpu_max_clock"
        stellar_apply_param "0" "$gpu_path/tmu"  # Disable thermal management for performance
        break
    done
}

tensor_normal() {
    echo "Applying Tensor G1 balanced optimizations..."
    
    # Call the dedicated Tensor optimizer
    tensor_optimizer balanced
    
    # Additional GPU optimizations for normal mode
    local gpu_path="/sys/kernel/gpu"
    local min_freq max_freq freq_source
    
    for gpu_path in /sys/devices/platform/*.mali /sys/kernel/gpu; do
        [ ! -d "$gpu_path" ] && continue
        
        [ -f "$gpu_path/gpu_available_frequencies" ] && freq_source="$gpu_path/gpu_available_frequencies" || freq_source="$gpu_path/gpu_freq_table"
        min_freq=$(stellar_get_nadir_hz "$freq_source")
        
        if [ "$lite_mode" -eq 1 ]; then
            max_freq=$(stellar_get_median_hz "$freq_source")
        else
            max_freq=$(stellar_get_apex_hz "$freq_source")
        fi

        if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
            max_freq=$((max_freq * 80 / 100))
        fi

        stellar_apply_param "$min_freq" "$gpu_path/gpu_min_clock"
        stellar_apply_param "$max_freq" "$gpu_path/gpu_max_clock"
        stellar_apply_param "1" "$gpu_path/tmu"  # Enable thermal management
        break
    done
}

tensor_battery() {
    echo "Applying Tensor G1 power saving optimizations..."
    
    # Call the dedicated Tensor optimizer
    tensor_optimizer powersave
    
    # Additional GPU optimizations for battery mode
    local gpu_path="/sys/kernel/gpu"
    local min_freq max_freq freq_source
    
    for gpu_path in /sys/devices/platform/*.mali /sys/kernel/gpu; do
        [ ! -d "$gpu_path" ] && continue
        
        [ -f "$gpu_path/gpu_available_frequencies" ] && freq_source="$gpu_path/gpu_available_frequencies" || freq_source="$gpu_path/gpu_freq_table"
        min_freq=$(stellar_get_nadir_hz "$freq_source")
        max_freq=$(stellar_get_median_hz "$freq_source")

        if [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; then
            max_freq=$((max_freq * 80 / 100))
        fi

        stellar_apply_param "$min_freq" "$gpu_path/gpu_min_clock"
        stellar_apply_param "$max_freq" "$gpu_path/gpu_max_clock"
        stellar_apply_param "2" "$gpu_path/tmu"  # Aggressive thermal management
        break
    done
}

mediatek_battery() {
    stellar_write_param "0" "/proc/gpufreq/gpufreq_opp_freq"
    stellar_write_param "-1" "/proc/gpufreqv2/fix_target_opp_index"
    
    if [ "$lite_mode" -eq 1 ] || { [ -f "$dvfs_gpu_file" ] && [ "$(cat "$dvfs_gpu_file")" -eq 1 ]; }; then
        if [ -d /proc/gpufreqv2 ]; then
            mid_oppfreq=$(stellar_mtk_median_gpu_idx /proc/gpufreqv2/gpu_working_opp_table)
            stellar_apply_param "$mid_oppfreq" /sys/kernel/ged/hal/custom_boost_gpu_freq
        else
            mid_freq=$(stellar_get_median_hz /proc/gpufreq/gpufreq_opp_dump)
            stellar_apply_param "$mid_freq" /proc/gpufreq/gpufreq_opp_freq
        fi
    fi
}

common_tweaks() {
    for dir in /sys/block/*; do
        stellar_write_param 0 "$dir/queue/iostats"
        stellar_write_param 0 "$dir/queue/add_random"
    done &

    stellar_apply_param 0 /proc/sys/kernel/sched_schedstats
    stellar_apply_param 0 /proc/sys/kernel/sched_autogroup_enabled
    stellar_apply_param 1 /proc/sys/kernel/sched_child_runs_first
}

game_profiles() {
    hmp_tweaks game
    skip_perf_file="$config_file/skip_perf"
    if [ -f "$skip_perf_file" ] && [ "$(cat "$skip_perf_file")" -eq 1 ]; then
        return 0
    fi

    [ "$(cat $config_file/dnd)" -eq 1 ] && set_dnd Y
    [ "$(cat $config_file/zt)" -eq 1 ] && zeta_tweak apply
    
    cmd power set-adaptive-power-saver-enabled false
    cmd power set-fixed-performance-mode-enabled true
    
    for cpu in $cpu_path; do
        local freq
        if [ "$lite_mode" -eq 1 ]; then
            freq=$(stellar_get_median_hz "$cpu/scaling_available_frequencies")
        else
            freq=$(cat "$cpu/cpuinfo_max_freq")
        fi
        if [ -n "$freq" ]; then
            stellar_apply_param "$freq" "$cpu/scaling_max_freq"
        fi
    done
    case "$Esoci" in
    1) mediatek_perf ;;
    2) snapdragon_perf ;;
    3) exynos_perf ;;
    4) unisoc_perf ;;
    5) tensor_perf ;;
    esac
}

normal_profiles() {
    hmp_tweaks normal
    [ "$(cat $config_file/dnd)" -eq 1 ] && set_dnd N
    [ "$(cat $config_file/zt)" -eq 1 ] && zeta_tweak revert    
    
    cmd power set-adaptive-power-saver-enabled false
    cmd power set-fixed-performance-mode-enabled false

    for cpu in $cpu_path; do
        local max_freq
        if [ "$lite_mode" -eq 1 ]; then
            max_freq=$(stellar_get_median_hz "$cpu/scaling_available_frequencies")
        else
            max_freq=$(cat "$cpu/cpuinfo_max_freq")
        fi
        stellar_apply_param "$max_freq" "$cpu/scaling_max_freq"
    done
    case "$Esoci" in
    1) mediatek_normal ;;
    2) snapdragon_normal ;;
    3) exynos_normal ;;
    4) unisoc_normal ;;
    5) tensor_normal ;;
    esac
}

battery_profiles() {
    hmp_tweaks battery
    [ "$(cat $config_file/dnd)" -eq 1 ] && set_dnd N
    [ "$(cat $config_file/zt)" -eq 1 ] && zeta_tweak revert
    
    cmd power set-adaptive-power-saver-enabled true
    cmd power set-fixed-performance-mode-enabled false

    for cpu in $cpu_path; do
        local max_freq
        if [ "$lite_mode" -eq 1 ]; then
            max_freq=$(stellar_get_median_hz "$cpu/scaling_available_frequencies")
        else
            freq=$(cat "$cpu/cpuinfo_max_freq")
        fi
        stellar_apply_param "$max_freq" "$cpu/scaling_max_freq"
    done
    case "$Esoci" in
    1) mediatek_battery ;;
    2) snapdragon_battery ;;
    3) exynos_battery ;;
    4) unisoc_battery ;;
    5) tensor_battery ;;
    esac
}

case "$1" in
    0) common_tweaks ;;
    1) game_profiles ;;
    2) normal_profiles ;;
    3) battery_profiles ;;
esac

sync
exit 0